/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/building_java_projects.html
 */

buildscript {
    ext {
        groovyVersion = '3.0.13'
        guavaVersion = '31.1-jre'
        jacksonVersion = '2.11.1'
        jococoToolVersion = '0.8.8'
        junitVersion = '4.13.2'
        lombokVersion = '1.18.22'
        mongoVersion = '3.12.12'
        spockVersion = '2.2-groovy-3.0'
        springBootVersion = '2.4.2'
        springDependencyVersion = '1.0.11.RELEASE'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
        flywayVersion = '7.6.0'
    }
}

plugins {
    id 'groovy'

    id 'application'

    id 'checkstyle'

    id 'jacoco'

    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"

}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    runtimeOnly 'org.postgresql:postgresql:42.2.19'
    runtimeOnly 'com.h2database:h2:1.4.200'
    implementation "org.flywaydb:flyway-core:${flywayVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"

    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "junit:junit:${junitVersion}"

    implementation "com.google.guava:guava:${guavaVersion}"

    implementation "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"

    runtimeOnly 'org.postgresql:postgresql:42.2.19'
    runtimeOnly 'com.h2database:h2:1.4.200'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation "org.spockframework:spock-spring:${spockVersion}"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"

    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'

}

application {
    mainClass = 'pl.futurecollars.invoicing.InvoiceApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test
}

jacoco {
    toolVersion = "${jococoToolVersion}"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.65
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.70
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'pl/futurecollars/invoicing/InvoiceApplication.class',
                    'pl/futurecollars/invoicing/config/*'])
        }))
    }
}

tasks.named('startScripts') {
    dependsOn 'bootJar'
}

task testWithFileDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'file'
}

task testWithMemoryDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'memory'
}

task testWithSqlDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'sql'
}

task testWithJpaDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
}

task testWithJpaFlywayDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa-flyway'
}

task testWithMongoDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'mongo'
}

check.dependsOn testWithFileDatabase
check.dependsOn testWithMemoryDatabase
check.dependsOn testWithSqlDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithJpaFlywayDatabase
check.dependsOn testWithMongoDatabase

String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("mac")) {
    task testWithPostgreSqlDatabase(type: Test) {
        systemProperty 'spring.profiles.active', 'sql-pg'
    }

    check.dependsOn testWithPostgreSqlDatabase

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
    }

}